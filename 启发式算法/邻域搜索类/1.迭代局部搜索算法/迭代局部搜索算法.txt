https://mp.weixin.qq.com/s?__biz=MzU0NzgyMjgwNg==&mid=2247486979&idx=1&sn=f8216dab6f017da393477b0b464dc224&chksm=fb49c3bacc3e4aac782c3abcfaaa379a4185962cc9ce57d7fb6a18f94e4c7cb4a78bf173783a&scene=21#wechat_redirect



迭代局部搜索算法


1.1
局部搜索是解决最优化问题的一种启发式算法。因为对于很多复杂的问题，求解最优解的时间可能是极其长的。因此诞生了各种启发式算法来退而求其次寻找次优解或近似最优解，局部搜索就是其中一种。它是一种近似算法（Approximate algorithms）。

简单来说，局部搜索算法是一种简单的   贪心搜索算法     ，该算法每次从当前解的邻域解空间中选择一个最好邻居作为下次迭代的当前解，直到达到一个局部最优解(local optimal solution)。

局部搜索从一个初始解出发，然后搜索解的邻域，如有更优的解则移动至该解并继续执行搜索，否则就停止算法获得局部最优解。

-------------------------
1.2 思想过程
局部搜索会先从一个初始解开始，通过邻域动作。产生初始解的邻居解，然后根据某种策略选择邻居解。一直重复以上过程，直到达到终止条件。

不同局部搜索算法的区别就在于：邻域动作的定义以及选择邻居解的策略。这也是决定算法好坏的关键之处。

---------------------------
1.3邻域动作
其实邻域动作就是一个函数。那么，通过这个函数，针对当前解s，产生s对应的邻居解的一个集合。比如：

===============================
2 简单局部搜索

给大家科普几个简单局部搜索算法，它们是基于个体的启发式算法（Single solution）

2.1 爬山法（HILL-CLIMBING）
2.2 模拟退火（SIMULATED ANNEALING）
2.3 禁忌搜索算法(Tabu Search)

===============================
3 迭代局部搜索（Iterated Local Search, ILS）

3.1
迭代局部搜索属于探索性局部搜索方法（EXPLORATIVE LOCAL SEARCH METHODS）的一种。
☆它在局部搜索得到的局部最优解上，加入了扰动，然后再重新进行局部搜索。

3.2

代局部搜索过程：


＊初始状态：best_solution(最优解)、current_solution(当前解)。
＊从初始解(best_solution)中进行局部搜索，找到一个局部最优解s1(best_solution)。
＊扰动s1(best_solution)，获得新的解s2(current_solution)。
＊从新解s2(current_solution)中进行局部搜索，再次找到一个局部最优解s3(best_solution)。
＊基于判断策略，对s3(current_solution)好坏进行判断。选择是否接受s3(current_solution)作为新的best_solution。
＊直到达到边界条件，不然跳回第二步一直循环搜索。


-------------------------------------------------------------
学习笔记：


==>原文章给出了使用C++编写的代码，这里同目录下有python编写的代码。
可以看到，python运行起来非常之慢

旅行推销员问题（Travelling salesman problem, TSP）是这样一个问题：给定一系列城市和每对城市之间的距离，求解访问每一座城市一次并回到起始城市的最短回路。它是组合优化中的一个NP难问题

从图论的角度来看，该问题实质是在一个带权完全无向图中，找一个权值最小的哈密尔顿回路。



=============================
ILS()

1.计算路径长度 cost_total
2.计算两个城市间的距离 distance_2city
3.本地局部搜索local_search      #传入best_solution
	3.1颠倒数组中两个位置间的元素位置swap_element
	3.2邻域动作two_opt_swp
	3.3计算邻域操作优化值calc_delta
	3.4更新Delta的函数Update    （本例中并不优化）
	#开始局部搜索
	迭代出Delta矩阵
	当前符合算法执行下去的条件：
		枚举所有可能的交换   #即所有的邻域
			找到更好的解，就重新搜索这个解所在的邻域
	在算法终止条件内，找到了一个局部best_solution

4.判断接受准则AcceptanceCriterion
5.城市序列划分并打乱double_bridge_move
6.扰动函数perturbation

随机产生初始解
执行本地局部搜索
	最大代数之内：
		扰动操作
		本地搜索
		找到了一个best_solution
	返回result

main()
	执行ILS()


#这样逻辑就很清楚了


