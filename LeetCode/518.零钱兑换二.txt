给定不同面额的硬币和一个总金额。写出函数来计算可以凑成总金额的硬币组合数。假设每一种面额的硬币有无限个。 

 

示例 1:

输入: amount = 5, coins = [1, 2, 5]
输出: 4
解释: 有四种方式可以凑成总金额:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1

思路：
用dp = [0] * (amount + 1)  来表示组合数
当没有硬币的时候，只有金额为0的时候有一种组合
dp[0] = 1

比如只有硬币2的时候，那么dp[2] = 1, dp[4] = 1 ....  dp[10] = 1

在硬币里面加上5，那么dp[0] = 1, dp[2] = 1, dp[4] = 1, dp[5] = 1,   6,8都是1，而10会是2
dp[10] = dp[10] + dp[10 - 5]
		dp[5] = dp[5] + dp[5-5] = 1

dp[x] = dp[x] + dp[x - coin]




==============================================

class Solution:
    def change(self, amount, coins):
    	dp = [0] * (amount + 1)
    	dp[0] = 1
    	for coin in coins:
    		for x in range(coin,amount + 1):
    			dp[x] += dp[x - coin]
    	return dp[amount]


if __name__ == '__main__':
	S = Solution()
	amount = 11
	# 显然这跟coins的顺序并没有关系
	coins = [10,5,2]
	print(S.change(amount,coins))

# 这是非常巧妙的方法呀










































