给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。
注意:
    可以认为区间的终点总是大于它的起点。
    区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。

示例 1:
输入: [ [1,2], [2,3], [3,4], [1,3] ]
输出: 1
解释: 移除 [1,3] 后，剩下的区间没有重叠。

示例 2:
输入: [ [1,2], [1,2], [1,2] ]
输出: 2
解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。

示例 3:
输入: [ [1,2], [2,3] ]
输出: 0
解释: 你不需要移除任何区间，因为它们已经是无重叠的了。


================================================

思路：

按照起点或者终点排序

在选择要保留区间时，区间的结尾十分重要：选择的区间结尾越小，余留给其它区间的空间就越大，就越能保留更多的区间。因此，我们采取的贪心策略为，优先保留结尾小且不相交的区间。

----->如果两个区间不重叠，全保留；如果重叠了，保留终点较小的那个


----------------------------------------

new = []

new是空集，则添加intervals[i]进去
如果new的最后一个区间的终点   <=    intervals[i][0]    (intervals[i]的起点)
	显然应该直接把 intervals[i] 添加进去
除此之外
	如果   最后一个区间的终点 >   intervals[i]的终点
		删去最后一个区间，添加intervals[i]


也就是说，双方不重叠，直接添加进去；如果有重叠且现在的终点大，就删()增()
这里还有一种情况就是这两个区间重叠了,现在是第二个区间的终点更大，那么必定删了它，不管它


最后返回的是 intervals的长度 - new的长度


==============================================

class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        intervals.sort(key = lambda x:[x[0]])
        res = 0
        new = []
        for i in range(len(intervals)):
            if not new:
                new.append(intervals[i])
            else:
                if new[-1][1] <= intervals[i][0]:
                    new.append(intervals[i])
                else:
                    if new[-1][1] > intervals[i][1]:
                        new.pop()
                        new.append(intervals[i])
        return len(intervals) - len(new)


