老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。

你需要按照以下要求，帮助老师给这些孩子分发糖果：

    每个孩子至少分配到 1 个糖果。
    相邻的孩子中，评分高的孩子必须获得更多的糖果。

那么这样下来，老师至少需要准备多少颗糖果呢？

示例 1:

输入: [1,0,2]
输出: 5
解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。

示例 2:

输入: [1,2,2]
输出: 4
解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。
     第三个孩子只得到 1 颗糖果，这已满足上述两个条件。

==========================================

思路：

p = len(ratings)
初始化，每个都给一颗糖
candy = [ 1 for _ in range(p)]

先从左往右一遍
for i in range(p -1)
一个小孩，跟他右边的比
如果r[i] > r[i+1]:
candy[i] += 1
如果小
显然不用变


------

先从左往右遍历一遍，如果右边孩子的评分比左边的高，则右边孩子的糖果数更新为左边孩子的糖果数加 1；再从右往左遍历一遍，如果左边孩子的评分比右边的高，且左边孩子当前的糖果数不大于右边孩子的糖果数，则左边孩子的糖果数更新为右边孩子的糖果数加 1。


===========

class Solution:
    def candy(self, ratings: List[int]) -> int:
        p = len(ratings)
        candy = [1 for _ in range(p)]

        # 从左往右遍历,左边的小于右边的，右边的糖果数更新为左边+1
        for i in range(p-1):
            if ratings[i] < ratings[i+1]:
                candy[i+1] = candy[i] + 1
        # 再从右往左遍历,如果右边的小于左边的，且右边的糖果数大于等于左边的糖果数
        # 则左边的糖果数更新为右边的+1
        for i in range(1,p):
            if ratings[-i] < ratings[-i-1] and candy[-i]>=candy[-i-1]:
                candy[-i-1] = candy[-i] + 1
        return sum(candy)





