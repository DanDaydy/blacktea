给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。

函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。

说明:

    返回的下标值（index1 和 index2）不是从零开始的。
    你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。

示例:

输入: numbers = [2, 7, 11, 15], target = 9
输出: [1,2]
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。

===============================================

思路：
数组是排好序的
双指针，一个从左往右，一个从右往左

如果二者之和＞target，那么右边的往左一位，
反之，左边的往右一位

直到相等

===================

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        left, right = 0, len(numbers)-1
        while True:
            sum = numbers[left] + numbers[right]
            if sum == target:
                break
            elif sum < target:
                left += 1
            else:
                right -= 1

        return [left+1,right+1]
