给你一个字符串 S、一个字符串 T 。请你设计一种算法，可以在 O(n) 的时间复杂度内，从字符串 S 里面找出：包含 T 所有字符的最小子串。

示例：
输入：S = "ADOBECODEBANC", T = "ABC"
输出："BANC"

=================================

import collections
class Solution:
    def minWindow(self, s: str, t: str) -> str:
    	# 如果不存在键值则返回默认值的字典
        need=collections.defaultdict(int)
        # t中的字母在t中出现了几次
        for c in t:
            need[c]+=1
        needCnt=len(t)
        i=0
        # 0 到 正无穷
        res=(0,float('inf'))
        # 不断增加j，使i, j 包围的区间包含所有的所需字母
        for j,c in enumerate(s):
            if need[c]>0:
                needCnt-=1
            # 每经过一个字母，它在字典中的值就减1
            need[c]-=1
            # 当needCnt为0的时候，显然已经找到这个区间了
            if needCnt==0:
                while True:
                	# 尝试让i往右移动，直到碰到第一个所需字母
                    if need[s[i]] == 0:
                        break
                    need[s[i]]+=1
                    i+=1
                # 碰到之后，看现在区间的长度是不是更小
                if j-i<res[1]-res[0]:
                    res=(i,j)
                
                need[s[i]]+=1
                needCnt+=1
                i+=1
        return '' if res[1]>len(s) else s[res[0]:res[1]+1]





