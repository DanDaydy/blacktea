给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。
你的算法时间复杂度必须是 O(log n) 级别。
如果数组中不存在目标值，返回 [-1, -1]。

示例 1:
输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]

示例 2:
输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]

===========================================

思路：
通过二分查找，找出现的第一个target的位置
找最后一个target的位置

查找第一个位置：
while l < r:
mid = (l+r) // 2
if nums[mid] == target: r = mid


查找最后一个位置：
while l < r:
mid = (l+r+1) // 2
if nums[mid] == target: l = mid

----------------------


class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if len(nums) == 0:
            return [-1, -1]
        first = self.find_first_position(nums,target)
        if first == -1:
            return [-1, -1]
        last = self.find_last_position(nums,target)
        return [first, last]

    def find_first_position(self,nums,target):
        l, r = 0, len(nums) - 1
        while l < r:
            mid = (l + r) // 2
            if nums[mid] < target:
                l = mid + 1
            elif nums[mid] > target:
                r = mid - 1
            else:
                r = mid
        if nums[l] == target:
            return l
        else:
            return -1

    def find_last_position(self,nums,target):
        l, r = 0, len(nums) - 1
        while l < r:
            mid = (l + r + 1) // 2
            if nums[mid] < target:
                l = mid + 1
            elif nums[mid] > target:
                r = mid - 1
            else:
                l = mid
        return l