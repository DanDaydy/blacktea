给你一个升序排列的整数数组 nums ，和一个整数 target 。
假设按照升序排序的数组在预先未知的某个点上进行了旋转。（例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] ）。
请你在数组中搜索 target ，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。
 

示例 1：
输入：nums = [4,5,6,7,0,1,2], target = 0
输出：4

示例 2：
输入：nums = [4,5,6,7,0,1,2], target = 3
输出：-1

示例 3：
输入：nums = [1], target = 0
输出：-1

=======================================

思路：

二分查找，求一个mid，如果mid > left， 那么左边就是有序的
这时候看target在哪，如果在左边那就简单了，接着二分查找即可，
如果在右边，那么继续分

反之亦然

虽然道理听起来很简单，但是细节非常的头疼
捋一下

左边有序：
	target在[l,mid] 里，那么r = mid，后面确实就是二分查找了
	target在(mid, r]里，那么l = mid + 1，接着对右边这个无序表进行分割




class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if not len(nums):
            return -1

        l, r = 0, len(nums) - 1
        while l < r:
            mid = (l + r) // 2
            if nums[mid] == target:
                return mid

            # mid 大于 l, 说明左边有序
            if nums[mid] > nums[l]:
                if nums[l] <= target <= nums[mid]:
                    r = mid
                else:
                    l = mid + 1
            # mid 不大于 l, 那么必然小于 r, 说明右边有序
            else:
                if nums[mid + 1] <= target <= nums[r]:
                    l = mid + 1
                else:
                    r = mid
        return l if nums[l] == target else -1


=============================

# 这种代码感觉更清晰一些
# 再看一遍的话，确实这样更好懂一些
# 找一个数，使用这个<= 的模板即可

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        if not len(nums):
            return -1

        l, r = 0, len(nums) - 1
        while l <= r:
            mid = (l + r) // 2
            if nums[mid] == target:
                return mid

            # mid 大于 l, 说明左边有序
            if nums[mid] >= nums[l]:
                if nums[l] <= target < nums[mid]:
                    r = mid - 1
                else:
                    l = mid + 1
            # mid 不大于 l, 那么必然小于 r, 说明右边有序
            else:
                if nums[mid] < target <= nums[r]:
                    l = mid + 1
                else:
                    r = mid - 1
        return -1


