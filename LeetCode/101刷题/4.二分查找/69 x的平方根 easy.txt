实现 int sqrt(int x) 函数。

计算并返回 x 的平方根，其中 x 是非负整数。
由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。

示例 1:
输入: 4
输出: 2

示例 2:
输入: 8
输出: 2
说明: 8 的平方根是 2.82842..., 
     由于返回类型是整数，小数部分将被舍去。

===================================================

思路：

1. 二分查找

原理不是很难，但是细节处理很头疼
我先把这个当模板记住，在后面做题应用的时候再仔细琢磨

# 这应该是 左闭右闭 写法

class Solution:
    def mySqrt(self, x: int) -> int:
        l, r, ans = 0, x, -1
        while l <= r:
            mid = (l + r) // 2
            if mid ** 2 <= x:
                ans = mid
                l = mid + 1
            else:
                r = mid - 1
        return ans


2.牛顿迭代
通过迭代来找零点，输入的为了方便我们假设是C
f(x) = x^2 - C
找它的零点

迭代公式是这样
x_1 = x_0 -   f(x_0) /  f'(x_0)

选x_0为C，通过公式来迭代，不断地逼近零点，等到迭代的两次x_i < 10^-7 的时候，就可以认为差不多迭代到了，按题意返回int(x)


class Solution:
    def mySqrt(self, x: int) -> int:
        if x == 0:
            return 0
        
        C, x0 = float(x), float(x)
        while True:
            xi = 0.5 * (x0 + C / x0)
            if abs(x0 - xi) < 1e-7:
                break
            x0 = xi
        
        return int(x0)



