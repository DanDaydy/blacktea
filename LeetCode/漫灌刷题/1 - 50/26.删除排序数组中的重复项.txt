给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

 

示例 1:

给定数组 nums = [1,1,2], 

函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 

你不需要考虑数组中超出新长度后面的元素。


思路：
双指针

for i in range(len(nums)):
j = i + 1
while j < len(nums):
if nums[i] == nums[j] :
del nums[j]
else:
break

return nums



=================================

我的答案：
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        for i in range(len(nums)):
            j = i + 1
            while j < len(nums):
                if nums[i] == nums[j] :
                    del nums[j]
                else:
                    break

        return len(nums)

#删除思路，可能还是复杂了一些
#双指针的话也可以不用这么写
#可以直接写成 i = 0， j = 1

------------

#直接修改前 k 个数，不管后面的

#双指针的写法，这种看起来比较简洁一些

class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        a = 0
        b = 1
        while b < len(nums):
            if nums[b] == nums[a]:
                b += 1
            else:
                a += 1
                nums[a] = nums[b]
                b += 1     # 这一步我优化的不错，Ohohoho
        return a+1





