编写一个函数来查找字符串数组中的最长公共前缀。

如果不存在公共前缀，返回空字符串 ""。

示例 1:

输入: ["flower","flow","flight"]
输出: "fl"



思路：

写一个函数，输入两个字符串，输出两个字符串的公共前缀

1.比较前两个字符串，public = 公共前缀
2.比较public和第三个字符串，public = 公共前缀
循环，直到最后一个字符串
或者public == “”

边界问题：
如果输入的strs这个列表是空的，那就返回“”
如果输入的strs这个列表长度是1，那就返回strs[0]



============================================

class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if len(strs) == 0:
            return ""
        if len(strs) == 1:
            return strs[0]
        public = self.compare(strs[0],strs[1])
        for i in range(2,len(strs)):
            public = self.compare(public,strs[i])
            if public == "":
                return public
        return public


    def compare(self,str1,str2):
        common = ""
        l = min(len(str1),len(str2))
        for i in range(l):
            if str1[i] == str2[i]:
                common += str1[i]
            else:
                return common
        return common



官方答案：
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        # 这里对strs是不是空的处理值得学习
        if not strs:
            return ""
        # 直接给prefix赋值strs[0]
        prefix, count = strs[0], len(strs)
        for i in range(1, count):
            prefix = self.lcp(prefix, strs[i])
            if not prefix:
                break
        
        return prefix

    # 这里也是很漂亮的while循环
    def lcp(self, str1, str2):
        length, index = min(len(str1), len(str2)), 0
        while index < length and str1[index] == str2[index]:
            index += 1
        return str1[:index]

时间复杂度：O(mn)，其中 m 是字符串数组中的字符串的平均长度，n 是字符串的数量。最坏情况下，字符串数组中的每个字符串的每个字符都会被比较一次。

空间复杂度：O(1)。使用的额外空间复杂度为常数。



===============
# 使用zip函数的方法，非常漂亮

class Solution(object):
    def longestCommonPrefix(self, strs):
        ans = ''
        # 把strs里的所有字符串都传进去
        # 也就是说，把里面的str全都传进去zip，按顺序打包起来了
        # zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表
        for i in zip(*strs):
            if len(set(i)) == 1:
                ans += i[0]
            else:
                break
        return ans


