Python基础



数据类型和变量

字符串和编码

使用list和tuple

条件判断

循环

使用dict和set




=======================================================

数据类型和变量



数据类型



整数

浮点数

字符串

布尔值

空值      #None


-----------------------------------------------------------------

变量

#当我们写：
	a = 'ABC'

	时，Python解释器干了两件事情：
	 在内存中创建了一个'ABC'的字符串；
	在内存中创建了一个名为a的变量，并把它指向'ABC'。

也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据

---------------

常量

所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量
PI = 3.14159265359
但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法




地板除   //
10 // 3
3


余数运算    %
10 % 3
1





Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。

对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。








=======================================================

字符串和编码


字符编码



------------------------------------

Python的字符串


对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：
ord('A')
65

chr(66)
'B'

------------------------------------

格式化

%运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。


占位符	替换内容
%d	整数
%f	浮点数
%s	字符串
%x	十六进制整数


--

format()

另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多：

'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
'Hello, 小明, 成绩提升了 17.1%'


==========================================

使用list和tuple


list
Python内置的一种数据类型是列表：list。
list是一种有序的集合，可以随时添加和删除其中的元素。

☆追加元素到末尾
	list.append()
☆把元素插入到指定的位置（例如索引号为i的位置）
	list.insert(i,' ')
☆删除列表末尾的元素
	list.pop()
☆删除指定位置的元素
	list.pop(i)
☆、把某个元素替换成别的元素，可以直接赋值给对应的索引位置
	list[i] = ' '

---------------------

tuple
另一种有序列表叫元组：tuple。
tuple和list非常类似，但是tuple一旦初始化就不能修改



list和tuple是Python内置的有序集合，一个可变，一个不可变。根据需要来选择使用它们。


=======================================================

条件判断

if :
elif:
else:

条件判断可以让计算机自己做选择，Python的if...elif...else很灵活。

条件判断从上向下匹配，当满足条件时执行对应的块内语句，后续的elif和else都不再执行。


--

再议input


input()返回的数据类型是str


s = input('birth: ')
birth = int(s)


=======================================================

循环

Python的循环有两种
一种是for...in循环
依次把list或tuple中的每个元素迭代出来

for x in ...循环
就是把每个元素代入变量x，然后执行缩进块的语句


sum = 0
for x in range(101):
    sum = sum + x
print(sum)

5050

--

第二种循环是while循环
只要条件满足，就不断循环，条件不满足时退出循环

sum = 0
n = 99
while n > 0:
    sum = sum + n
    n = n - 2
print(sum)


--

break
在循环中，break语句可以提前退出循环

n = 1
while n <= 100:
    if n > 10: # 当n = 11时，条件满足，执行break语句
        break # break语句会结束当前循环
    print(n)
    n = n + 1
print('END')


--


continue
在循环过程中，也可以通过continue语句，跳过当前的这次循环，直接开始下一次循环。


n = 0
while n < 10:
    n = n + 1
    if n % 2 == 0: # 如果n是偶数，执行continue语句
        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行
    print(n)

--

循环是让计算机做重复任务的有效的方法。

break语句可以在循环过程中直接退出循环，而continue语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合if语句使用。

=======================================================

使用 dict 和 set

dict

Python内置了字典：dict的支持，dict全称dictionary，使用键-值（key-value）存储，具有极快的查找速度。

删除一个key
	dict.pop(key)
	#会返回key的value

dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象

--

set

set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。

重复元素在set中自动被过滤


add()
remove()

因此，两个set可以做数学意义上的交集、并集等操作：

s1 = set([1, 2, 3])
s2 = set([2, 3, 4])

s1 & s2
{2, 3}

s1 | s2
{1, 2, 3, 4}



set和dict的唯一区别仅在于没有存储对应的value
但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。


--
再议不可变对象

str是不变对象，而list是可变对象

a = 'abc'

a.replace('a', 'A')
'Abc'

 a
'abc'


对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的


使用key-value存储结构的dict在Python中非常有用，选择不可变对象作为key很重要，最常用的key是字符串

