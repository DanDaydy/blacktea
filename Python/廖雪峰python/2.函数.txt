函数

调用函数
定义函数
函数的参数
递归函数

=======================================================
Python不但能非常灵活地定义函数，而且本身内置了很多有用的函数，可以直接调用

调用函数

☆求绝对值的函数     abs()
☆函数max()可以接收任意多个参数，并返回最大的那个

------------------------
数据类型转换

☆int()函数可以把其他数据类型转换为整数
(
函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”
a = abs # 变量a指向abs函数
a(-1) # 所以也可以通过a调用abs函数
1
)
☆转换成十六进制的函数    hex()

------------------------
定义函数
定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回
def my_abs(x):
	if x >= 0:
		return x
	else:
		return -x

-------
空函数

如果想定义一个什么事也不做的空函数，可以用pass语句：
def nop():
	pass
#实际上pass可以用来做占位符

----------------------------------------------
参数检查
☆数据类型检查函数  isinstance()
def my_abs(x):
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x
#检查输入的参数类型，如果传入错误的参数类型，函数就可以抛出一个错误

--------------------------------------------
返回多个值
函数可以返回多个值
#从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标
import math
def move(x, y, step, angle=0):
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny

返回值是一个tuple，但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便

----------
小结

定义函数时，需要确定函数名和参数个数；
如果有必要，可以先对参数的数据类型做检查；
函数体内部可以用return随时返回函数结果；
函数执行完毕也没有return语句时，自动return None。
函数可以同时返回多个值，但其实就是一个tuple。

=======================================================
函数的参数

位置参数
位置参数：调用函数时，传入的两个值按照位置顺序依次赋给参数

----------
默认参数
def power(x, n=2):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
对于n > 2的其他情况，就必须明确地传入n，比如power(5, 3)
默认参数可以简化函数的调用

☆默认参数必须指向不变对象
☆必选参数在前，默认参数在后

-----------------------------------------
可变参数

在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。
我们把函数的参数改为可变参数：
def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。

如果已经有一个list或者tuple，要调用一个可变参数怎么办？
Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去：
nums = [1, 2, 3]
calc(*nums)
14
*nums表示把nums这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。

-------------------------------------------------
关键字参数

可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：

def person(name, age, **kw):
	print('name:', name, 'age:', age, 'other:', kw)

extra = {'city': 'Beijing', 'job': 'Engineer'}
person('Jack', 24, **extra)
	name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}

**extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict（是extra的一份拷贝）

-----------------------------------------------------
命名关键字参数
如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：

def person(name, age, *, city, job):
    print(name, age, city, job)

☆命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数.
☆如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了.
☆命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错.

----------
组合参数
在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。

☆参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。

--------------------------------------------
练习：
def product(x, *y):
    for val in y:
        x *= val
    return x

------------------------------------
小结

Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。
默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误。

☆要注意定义可变参数和关键字参数的语法：
	*args是可变参数，args接收的是一个tuple；
	**kw是关键字参数，kw接收的是一个dict。

☆调用函数时如何传入可变参数和关键字参数的语法：
	可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过*args传入：func(*(1, 2, 3))；
	关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过**kw传入：func(**{'a': 1, 'b': 2})。

使用*args和**kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。
命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。
定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符*，否则定义的将是位置参数。

=======================================================

递归函数

在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。

def fact(n):
    if n==1:
        return 1
    return n * fact(n - 1)

--------------------------------------
小结

使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。

针对尾递归优化的语言可以通过尾递归防止栈溢出。尾递归事实上和循环是等价的，没有循环语句的编程语言只能通过尾递归实现循环。

Python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。
