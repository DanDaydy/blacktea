函数式编程

返回函数
匿名函数
装饰器
偏函数

=======================================================
返回函数

函数作为返回值
高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。

一个可变参数的求和函数：
def calc_sum(*args):
    ax = 0
    for n in args:
        ax = ax + n
    return ax

如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：
def lazy_sum(*args):
    def sum():
        ax = 0
        for n in args:
            ax = ax + n
        return ax
    return sum
当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数：
f = lazy_sum(1, 3, 5, 7, 9)
f
<function lazy_sum.<locals>.sum at 0x101c6ed90>
调用函数 f 时，才真正计算求和的结果：
f()
25

在这个例子中，我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。

当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：
f1 = lazy_sum(1, 3, 5, 7, 9)
f2 = lazy_sum(1, 3, 5, 7, 9)
f1==f2
False
☆f1() 和 f2() 的调用结果互不影响。

----------
闭包
注意到返回的函数在其定义内部引用了局部变量args，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。

☆另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了 f() 才执行。
def count():
    fs = []
    for i in range(1, 4):
        def f():
             return i*i
        fs.append(f)
    return fs
f1, f2, f3 = count()

在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。
#注意，是创建了三个函数，将三个函数分别赋予了f1,f2,f3，这时并没有计算它们

调用f1()，f2()和f3()：
f1()
9
f2()
9
f3()
9

全部都是9！原因就在于返回的函数引用了变量 i ，但它并非立刻执行。
#return fs = fs.append(f) = fs.append(i * i)
等到3个函数都返回时，它们所引用的变量 i 已经变成了3，因此最终结果为9。

#明白了明白了明白了

！！！返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。 

☆如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：

def count():
    def f(j):
        def g():
            return j*j
        return g
    fs = []
    for i in range(1, 4):
        fs.append(f(i))      # f(i)立刻被执行，因此i的当前值被传入f()
    return fs

------------------------------------------------------------------------
练习：利用闭包返回一个计算器函数，每次调用它返回递增整数：

def createCounter():
    n = 0               # 先定义一个变量作为初始值
    def counter():      # 定义一个内部函数用来计数
        nonlocal n        # 声明变量n非内部函数的局部变量，否则内部函数只能引用，一旦修改会视其为局部变量，报错“局部变量在赋值之前被引用”。
        n += 1            # 每调用一次内部函数，对n + 1
        return n          # 返回n的值
    return counter

--------------------------
小结
☆一个函数可以返回一个计算结果，也可以返回一个函数。
☆返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。

=======================================================

匿名函数

当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。
关键字lambda表示匿名函数，冒号前面的 x 表示函数参数。
匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。
 list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))
[1, 4, 9, 16, 25, 36, 49, 64, 81]
匿名函数lambda x: x * x实际上就是：
def f(x):
    return x * x

用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。
此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数。
同样，也可以把匿名函数作为返回值返回。

--------
练习
请用匿名函数改造下面的代码：
ef is_odd(n):
    return n % 2 == 1
L = list(filter(is_odd, range(1, 20)))

L = list(filter(lambda n: n%2 == 1,range(1,20)))

=======================================================
装饰器
###
简单地说：他们是修改其他函数的功能的函数。他们有助于让我们的代码更简短，也更Pythonic
###
由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。
def now():
	print('2020')
f = now
f()
2020

函数对象有一个__name__属性，可以拿到函数的名字：
f.__name__
'now'

现在，假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为
“装饰器”（Decorator）。

-----
python中的args和kw：
*args：表示就是将实参中按照位置传值，多余的值都给args，且以元组的方式呈现
**kw：表示就是形参中按照关键字传值，多余的值都给kw，且以字典*的方式呈现
-----

本质上，decorator就是一个返回函数的高阶函数。
定义一个能打印日志的decorator:
def log(func):
    def wrapper(*args, **kw):
        print('call %s():' % func.__name__)
        return func(*args, **kw)
    return wrapper

助Python的@语法，把decorator置于函数的定义处：
@log
def now():
    print('2020')

调用now()函数，不仅会运行now()函数本身，还会在运行now()函数前打印一行日志：
now()
call now():
2015-3-25

由于log()是一个decorator，返回一个函数，所以，原来的now()函数仍然存在，只是现在同名的now变量指向了新的函数，于是调用now()将执行新函数，即在log()函数中返回的wrapper()函数。
wrapper()函数的参数定义是(*args, **kw)，因此，wrapper()函数可以接受任意参数的调用。在wrapper()函数内，首先打印日志，再紧接着调用原始函数。

-----
###
@dec1
@dec2
def test(arg):
    pass
其效果类似于
dec1(dec2(test(arg)))
###
-----
如果decorator本身需要传入参数，那就需要编写一个返回decorator的高阶函数，写出来会更复杂。比如，要自定义log的文本：
def log(text):
    def decorator(func):
        def wrapper(*args, **kw):
            print('%s %s():' % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator

@log('execute')
def now():
    print('2020')
执行结果：
now()
execute now():
2020

3层嵌套的效果是这样的：
now = log('execute')(now)
我们来剖析上面的语句，首先执行log('execute')，返回的是decorator函数，再调用返回的函数，参数是now函数，返回值最终是wrapper函数。
以上两种decorator的定义都没有问题，但还差最后一步。因为我们讲了函数也是对象，它有__name__等属性，但你去看经过decorator装饰之后的函数，它们的__name__已经从原来的'now'变成了'wrapper'：
now.__name__
'wrapper'

需要把原始函数的__name__等属性复制到wrapper()函数中，使用Python内置的functools.wraps函数。

☆一个完整的decorator的写法如下：
import functools
def log(func):
    @functools.wraps(func)
    def wrapper(*args, **kw):
        print('call %s():' % func.__name__)
        return func(*args, **kw)
    return wrapper

或者针对带参数的decorator：
import functools
def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            print('%s %s():' % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator

☆△在定义wrapper()的前面加上@functools.wraps(func)即可。

---------------------------------------
练习
请设计一个decorator，它可作用于任何函数上，并打印该函数的执行时间：
import time, functools
def metric(fn):
    @functools.wraps(fn)
    def wrapper(*arg,**kw):
        start = time.time()
        result = fn(*arg,**kw)
        end = time.time()
        print('%s executed in %s ms' % (fn.__name__, end-start))
        return result
    return wrapper

=======================================================

偏函数

偏函数（Partial function）

假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：
def int2(x, base=2):
    return int(x, base)

functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()，可以直接使用下面的代码创建一个新的函数int2：
import functools
int2 = functools.partial(int, base=2)

int2('1000000')
64
int2('1010101')
85

functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单

注意到上面的新的int2函数，仅仅是把base参数重新设定默认值为2，但也可以在函数调用时传入其他值：
int2('1000000', base=10)
1000000

创建偏函数时，实际上可以接收函数对象、*args和**kw这3个参数，当传入：
int2 = functools.partial(int, base=2)
实际上固定了int()函数的关键字参数base，也就是：
int2('10010')
相当于：
kw = { 'base': 2 }
int('10010', **kw)

☆当传入：
max2 = functools.partial(max, 10)
实际上会把10作为*args的一部分自动加到左边，也就是：
max2(5, 6, 7)
相当于：
args = (10, 5, 6, 7)
max(*args)
结果为10。

-------------------
小结
当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。

