基础部分

1.导入 NumPy：
import numpy as np

2.查看NumPy版本信息：
np.__version__
'1.17.2'

------------------------------
创建数组
NumPy 的主要对象是多维数组 Ndarray。在 NumPy 中维度 Dimensions 叫做轴 Axes，轴的个数叫做秩 Rank。
☆注意，numpy.array 和 Python 标准库 array.array 并不相同，前者更为强大，这也就是我们学习 NumPy 的重要原因之一。

3.通过列表创建一维数组：
np.array([1,2,3])
array([1, 2, 3])
上方数组是一个秩为 1 的数组，因为它只有一个轴，而轴的长度为 3。

4.通过列表创建二维数组：
np.array([(1,2,3),(4,5,6)])
array([[1, 2, 3],
       [4, 5, 6]])
上方数组的秩为 2。第一个维度长度为 2,第二个维度长度为 3。

5.创建全为0的二维数组：
np.zeros((3,3))
array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])

6.创建全为 1 的三维数组：
np.ones((2,3,4))
array([[[1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.]],

       [[1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.]]])

7.创建一维等差数组：
np.arange(5)
array([0, 1, 2, 3, 4])

8. 创建二维等差数组：
np.arange(6).reshape(2,3)
array([[0, 1, 2],
       [3, 4, 5]])

9.创建单位矩阵（二维数组）：
np.eye(3)
array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])

10. 创建等间隔一维数组：
np.linspace(1,10, num = 6)
array([ 1. ,  2.8,  4.6,  6.4,  8.2, 10. ])

11. 创建二维随机数组：
np.random.rand(2,3)
array([[0.67496646, 0.19068369, 0.74365858],
       [0.2026558 , 0.83212739, 0.01364818]])

12. 创建二维随机整数数组（数值小于 5）：
np.random.randint(5,size = (2,3))
array([[3, 4, 2],
       [0, 1, 4]])

13. 依据自定义函数创建数组：
np.fromfunction(lambda i, j: i + j, (3, 3))
array([[0., 1., 2.],
       [1., 2., 3.],
       [2., 3., 4.]])

-----------------------------------------------------
数组运算
生成一维示例数组：
a = np.array([10, 20, 30, 40, 50])
b = np.arange(1, 6)
a, b
(array([10, 20, 30, 40, 50]), array([1, 2, 3, 4, 5]))


14. 一维数组加法运算：
a + b
array([11, 22, 33, 44, 55])

15. 一维数组减法运算：
array([ 9, 18, 27, 36, 45])

16. 一维数组乘法运算：
array([ 10,  40,  90, 160, 250])

17. 一维数组除法运算：
a / b
array([10., 10., 10., 10., 10.])


生成二维示例数组（可以看作矩阵）：
A = np.array([[1, 2],
              [3, 4]])
B = np.array([[5, 6],
              [7, 8]])
A, B
(array([[1, 2],
       [3, 4]]), array([[5, 6],
       [7, 8]]))

18. 矩阵加法运算：
A + B
array([[ 6,  8],
       [10, 12]])

19. 矩阵减法运算：
A - B
array([[-4, -4],
       [-4, -4]])

20. 矩阵元素间乘法运算：
A * B                    #相对应元素乘起来
array([[ 5, 12],
       [21, 32]])

21. 矩阵乘法运算（注意与上题的区别）：
np.dot(A,B)          #矩阵运算
array([[19, 22],
       [43, 50]])

如果使用 np.mat 将二维数组准确定义为矩阵，就可以直接使用 * 完成矩阵乘法计算。
np.mat(A) * np.mat(B)
matrix([[19, 22],
        [43, 50]])

22. 数乘矩阵：
2 * A
array([[2, 4],
       [6, 8]])

23. 矩阵的转置：
A.T
array([[1, 3],
       [2, 4]])

24.矩阵求逆：
np.linalg.inv(A)
array([[-2. ,  1. ],
       [ 1.5, -0.5]])

--------------------------------------------
数学函数

25. 三角函数：
print(a)
[10 20 30 40 50]
np.sin(a)
array([-0.54402111,  0.91294525, -0.98803162,  0.74511316, -0.26237485])

26. 以自然对数函数为底数的指数函数：
np.exp(a)
array([2.20264658e+04, 4.85165195e+08, 1.06864746e+13, 2.35385267e+17,
       5.18470553e+21])

27. 数组的方根的运算（开平方）：
np.sqrt(a)
array([3.16227766, 4.47213595, 5.47722558, 6.32455532, 7.07106781])

28. 数组的方根的运算（立方）：
np.power(a,3)
array([  1000,   8000,  27000,  64000, 125000], dtype=int32)

-------------------------------------------------------------------------
数组切片和索引

29. 一维数组索引：
a = np.array([1, 2, 3, 4, 5])
a[0], a[-1]
(1, 5)

30. 一维数组切片：
a[0:2], a[:-1]
(array([1, 2]), array([1, 2, 3, 4]))

31. 二维数组索引：
a = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)])
a[0], a[-1]
(array([1, 2, 3]), array([7, 8, 9]))

32. 二维数组切片（取第 2 列）：
a[:, 1]
array([2, 5, 8])

33. 二维数组切片（取第 2，3 行）：
a[1:3, : ]
array([[4, 5, 6],
       [7, 8, 9]])

-------------------------------------------------
数组形状操作

数组形状操作
a = np.random.random((3, 2))
a
array([[0.05258603, 0.31968146],
       [0.2801258 , 0.84723586],
       [0.32417966, 0.62991202]])

34. 查看数组形状：
a.shape
(3, 2)

35. 更改数组形状（不改变原始数组）：
a.reshape(2, 3)  # reshape 并不改变原始数组
array([[0.05258603, 0.31968146, 0.2801258 ],
       [0.84723586, 0.32417966, 0.62991202]])

36. 更改数组形状（改变原始数组）：
a.resize(2, 3)  # resize 会改变原始数组
a
array([[0.05258603, 0.31968146, 0.2801258 ],
       [0.84723586, 0.32417966, 0.62991202]])

37. 展平数组：
a.ravel()
array([0.05258603, 0.31968146, 0.2801258 , 0.84723586, 0.32417966,
       0.62991202])

38. 垂直拼合数组：
# 生成示例数组
a = np.random.randint(10, size=(3, 3))
b = np.random.randint(10, size=(3, 3))

a,b
(array([[6, 0, 4],
       [0, 6, 1],
       [3, 9, 9]]), array([[7, 4, 2],
       [9, 1, 9],
       [8, 2, 6]]))

np.vstack((a, b))
array([[6, 0, 4],
       [0, 6, 1],
       [3, 9, 9],
       [7, 4, 2],
       [9, 1, 9],
       [8, 2, 6]])

39. 水平拼合数组：
np.hstack((a, b))
array([[6, 0, 4, 7, 4, 2],
       [0, 6, 1, 9, 1, 9],
       [3, 9, 9, 8, 2, 6]])

40. 沿横轴分割数组：
np.hsplit(a, 3)
[array([[6],
       [0],
       [3]]), array([[0],
       [6],
       [9]]), array([[4],
       [1],
       [9]])]

41. 沿纵轴分割数组：
np.vsplit(a, 3)
[array([[6, 0, 4]]), array([[0, 6, 1]]), array([[3, 9, 9]])]

---------------------------------------------------------
数组排序
# 生成示例数组
a = np.array(([1, 4, 3], [6, 2, 9], [4, 7, 2]))
a
array([[1, 4, 3],
       [6, 2, 9],
       [4, 7, 2]])

42. 返回每列最大值：
np.max(a, axis=0)
array([6, 7, 9])

43. 返回每行最小值：
np.min(a, axis=1)
array([1, 2, 2])

44. 返回每列最大值索引：
np.argmax(a, axis=0)
array([1, 2, 1], dtype=int64)

45. 返回每行最小值索引：
np.argmin(a, axis=1)
array([0, 1, 2], dtype=int64)

--------------------------------------------------
数组统计

46. 统计数组各列的中位数：
# 继续使用上面的 a 数组
np.median(a, axis=0)
array([4., 4., 3.])

47. 统计数组各行的算术平均值：
np.mean(a, axis=1)
array([2.66666667, 5.66666667, 4.33333333])

48. 统计数组各列的加权平均值：
np.average(a, axis=0)      #所以这里的weight有一个默认值
array([3.66666667, 4.33333333, 4.66666667])

49. 统计数组各行的方差：
np.var(a, axis=1)
array([1.55555556, 8.22222222, 4.22222222])

50. 统计数组各列的标准偏差：
np.std(a, axis=0)
array([2.05480467, 2.05480467, 3.09120617])

