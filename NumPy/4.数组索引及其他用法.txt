数组索引和切片

我们已经明确了，Ndarray 是 NumPy 的组成核心，那么对于 NumPy 的多维数组，其实它完整集成了 Python 对于数组的索引语法 array[obj]。随着 obj 的不同，我们可以实现字段访问、数组切片、以及其他高级索引功能。

数组索引
我们可以通过索引值（从 0 开始）来访问 Ndarray 中的特定位置元素。NumPy 中的索引和 Python 对 list 索引的方式非常相似，但又有所不同。我们一起来看一下：
首先是，一维数据索引：
a = np.arange(10)  # 生成 0-9
a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

获取索引值为 1 的数据。
a[1]
1

分别获取索引值为 1，2，3 的数据。
a[[1, 2, 3]]
array([1, 2, 3])

对于二维数据而言：
a = np.arange(20).reshape(4, 5)
a
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])

获取第 2 行，第 3 列的数据。
a[1, 2]
7
#应该是等价于a[1][2]

如果，我们使用 Python 中的 list 索引同样的值，看看有什么区别：
a = a.tolist()
a
[[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]]

按照上面的方法获取第 2 行，第 3 列的数据。【报错】
a[1,  2]
TypeError: list indices must be integers or slices, not tuple

Python 中 list 索引 2 维数据的方法正确的做法是：
a[1][2]
7

如何索引二维 Ndarray 中的多个元素值，这里使用逗号,分割：
a = np.arange(20).reshape(4, 5)
a
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])

a[[1, 2], [3, 4]]            #相当于 取了a[1,3]和a[2,4]
array([ 8, 14])             #如果是用a[1,3],a[2,4]就相当于取了一个元组

这里需要注意索引的对应关系。我们实际获取的是 [1, 3]，也就是第 2 行和第 4 列对于的值 8。以及 [2, 4]，也就是第 3 行和第 5 列对应的值 14。

那么，三维数据呢？
a = np.arange(30).reshape(2, 5, 3)
a
array([[[ 0,  1,  2],
        [ 3,  4,  5],
        [ 6,  7,  8],
        [ 9, 10, 11],
        [12, 13, 14]],

       [[15, 16, 17],
        [18, 19, 20],
        [21, 22, 23],
        [24, 25, 26],
        [27, 28, 29]]])

a[[0, 1], [1, 2], [1, 2]]
array([ 4, 23])

--------------------------------------------------------
数组切片

NumPy 里面针对Ndarray的数组切片和 Python 里的list 切片操作是一样的。其语法为：
Ndarray[start:stop:step]

a = np.arange(10)
a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
a[:5]
array([0, 1, 2, 3, 4])
a[5:10]
array([5, 6, 7, 8, 9])
a[0:10:2]
array([0, 2, 4, 6, 8])

对于多维数组，我们只需要用逗号 , 分割不同维度即可：
a = np.arange(20).reshape(4, 5)
a
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])
先取第 3，4 列（第一个维度），再取第 1，2，3 行（第二个维度）
a[0:3, 2:4]
array([[ 2,  3],
       [ 7,  8],
       [12, 13]])

按步长为 2 取所有列和所有行的数据。
a[:, ::2]
array([[ 0,  2,  4],
       [ 5,  7,  9],
       [10, 12, 14],
       [15, 17, 19]])
当超过 3 维或更多维时，用 2 维数据的切片方式类推即可。

-----------------------------------------------------------------
排序、搜索、计数
最后，再介绍几个 NumPy 针对数组元素的使用方法，分别是排序、搜索和计数。

我们可以使用 numpy.sort方法对多维数组元素进行排序。其方法为：

numpy.sort(a, axis=-1, kind='quicksort', order=None)
其中：
    a：数组。
    axis：要排序的轴。如果为None，则在排序之前将数组铺平。默认值为 -1，沿最后一个轴排序。
    kind：{'quicksort'，'mergesort'，'heapsort'}，排序算法。默认值为 quicksort。

举个例子：
a = np.random.rand(20).reshape(4, 5)
a
array([[0.20855746, 0.77037498, 0.27163665, 0.93570606, 0.33420133],
       [0.95029142, 0.24683308, 0.60316529, 0.59388056, 0.63340867],
       [0.95421646, 0.7070275 , 0.67151677, 0.19866436, 0.95483551],
       [0.68956937, 0.45980078, 0.9266051 , 0.00909677, 0.31718007]])

np.sort(a)
array([[0.20855746, 0.27163665, 0.33420133, 0.77037498, 0.93570606],
       [0.24683308, 0.59388056, 0.60316529, 0.63340867, 0.95029142],
       [0.19866436, 0.67151677, 0.7070275 , 0.95421646, 0.95483551],
       [0.00909677, 0.31718007, 0.45980078, 0.68956937, 0.9266051 ]])

除了 numpy.sort，还有这样一些对数组进行排序的方法：

    numpy.lexsort(keys ,axis)：使用多个键进行间接排序。
    numpy.argsort(a ,axis,kind,order)：沿给定轴执行间接排序。
    numpy.msort(a)：沿第 1 个轴排序。
    numpy.sort_complex(a)：针对复数排序。

-------------------------------------------------------------------------
搜索和计数
除了排序，我们可以通过下面这些方法对数组中元素进行搜索和计数。列举如下：


    argmax(a ,axis,out)：返回数组中指定轴的最大值的索引。
    nanargmax(a ,axis)：返回数组中指定轴的最大值的索引,忽略 NaN。
    argmin(a ,axis,out)：返回数组中指定轴的最小值的索引。
    nanargmin(a ,axis)：返回数组中指定轴的最小值的索引,忽略 NaN。
    argwhere(a)：返回数组中非 0 元素的索引,按元素分组。
    nonzero(a)：返回数组中非 0 元素的索引。
    flatnonzero(a)：返回数组中非 0 元素的索引,并铺平。
    where(条件,x,y)：根据指定条件,从指定行、列返回元素。
    searchsorted(a,v ,side,sorter)：查找要插入元素以维持顺序的索引。
    extract(condition,arr)：返回满足某些条件的数组的元素。
    count_nonzero(a)：计算数组中非 0 元素的数量。

选取其中的一些方法举例：
a = np.random.randint(0, 10, 20)
a
array([1, 5, 7, 8, 0, 8, 2, 9, 3, 5, 8, 1, 1, 7, 1, 2, 0, 9, 6, 1])

np.argmax(a)
7

np.argmin(a)
4           #只返回了一个

np.nonzero(a)
(array([ 0,  1,  2,  3,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 17, 18,
       19], dtype=int64),)

np.count_nonzero(a)
18

